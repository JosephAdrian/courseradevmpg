z
c(z,555,z)
z*2 +100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4) + c(0,10,100)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my
my_div
library(xlsx)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
a = read.csv(path2csv, stringsAsFactors = FALSE)
a = read.csv("path2csv", stringsAsFactors = FALSE)
mydf = read.csv("path2csv", stringsAsFactors = FALSE)
mydf = read.csv(path2csv, stringsAsFactors = FALSE)
info()
mydf = read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, -r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
(cran,
| r_version == "3.1.1", country == "US")
(cran,| r_version == "3.1.1", country == "US")
(cran, r_version == "3.1.1", country == "US")
filter(cran,| r_version == "3.1.1", country == "US")
filter(cran,
| r_version == "3.1.1", country == "US")
filter(cran,| r_version == "3.1.1", country == "US")
?filter
filter(cran, r_version == "3.1.1", country == "US")
filter(cran,?Comparison)
?Comparison
filter(cran,"IN")
sd(c(5,8,12))
which.min(c(4,1,6))
?rnorm
?mar
?par
?example
example(InsectSprays)
?InsectSprays
?points
par(pch=21)
plot(cars)
par(pch="21")
plot(cars)
plot(cars, pch = 21)
plot(cars, pch = 25)
?plot
plot(cars, pch = 25,col="blue",bg="red")
?lm
lm(cars)
plot(cars, pch = 25,col="blue",bg="red")
abline(lm(cars))
?gl
gl(2,1)
gl(2,1,20)
gl(1,2,20)
gl(1,2,1)
gl(1,2,2)
gl(2,1,2)
gl(2,1,3)
?device
?pdf
dev.cur()
head(faithful)
plot(faithful)
?faithful
xyplot(faithful)
install.packages("lattice")
xyplot(faithful)
?xyplot
??xyplot
Depth <- equal.count(quakes$depth, number=8, overlap=.1)
xyplot(eruptions~waiting,faithful)
?equal.count
??equal.count
library(lattice)
xyplot(faithful)
xyplot(eruptions~waiting,faithful)
?ggplot2
??ggplot2
install.packages("ggplot2")
?ggplot
?ggplot2
head(mpg)
head(mpg)
library(datasets)
head(mpg)
cars
head(cars)
mpg
head(mtcars)
qplot(mpg,cyl,data=mtcars)
library(ggplot2)
qplot(mpg,cyl,data=mtcars)
qplot(mpg,wt,data=mtcars)
?qplot
qplot(mpg,wt,data=mtcars)
qplot(mpg,wt,data=mtcars,geom="smooth")
qplot(mpg,wt,data=mtcars,geom=c("point","smooth"))
ggplot(cars,aes(speed,dist))
g <- ggplot(cars,aes(speed,dist))
g <- ggplot(cars,aes(speed,dist))
g
summary(g)
library(nlme)
library(lattice)
?lattice
xyplot(weight ~ Time | Diet, BodyWeight)
install.packages("lattice")
install.packages("lattice")
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?hclust
hc <- hclust(dist(USArrests), "ave")
plot(hc)
class(hc)
?heatmap
x  <- as.matrix(mtcars)
rc <- rainbow(nrow(x), start = 0, end = .3)
cc <- rainbow(ncol(x), start = 0, end = .3)
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
?kmeans
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
colnames(x) <- c("x", "y")
(cl <- kmeans(x, 2))
(cl <- kmeans(x, 2))
class(cl)
(cl <- kmeans(x, 2))
plot(x, col = cl$cluster)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
?text
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x, y)
dataFrame
kmeansObj <- kmeans(dataFrame, centers = 3)
?kmeans
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
?plot
?image
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[, 1:5])
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
trainIndicator
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[, 1:5])
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
plot(trainSpam$capitalAve ~ trainSpam$type)
log(0)
log(0.1)
log(1)
plot(log(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam[,1:4]+1))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
head(trainSpam$type)
as.numeric(head(trainSpam$type))
library(kernlab)
data(spam)
str(spam[, 1:5])
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam[,1:4]+1))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
as.numeric(head(trainSpam$type))
a <- c("a","a","b","b")
a
as.numeric
as.numeric(a)
class(a)
class(trainSpam$type)
as.numeric(as.factor(a)
)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
costFunction
?glm
clotting <- data.frame(
u = c(5,10,15,20,30,40,60,80,100),
lot1 = c(118,58,42,35,27,25,21,19,18),
lot2 = c(69,35,26,21,18,16,13,12,12))
glm(lot1 ~ log(u), data = clotting, family = Gamma)
summary(glm(lot1 ~ log(u), data = clotting, family = Gamma))
cvError = rep(NA, 55)
library(boot)
?bbot
?boot
?reformulate
lmFormula = reformulate(names(trainSpam)[1], response = "numType")
names(trainSpam)[1]
trainSpam[1]
names(trainSpam)
head(trainspam)
head(trainSpam)
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
glmFit
cv.glm
?cv.glm
costFunction
library(kernlab)
data(spam)
str(spam[, 1:5])
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam[,1:4]+1))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
as.numeric(head(trainSpam$type))
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
lmFormula = reformulate(names(trainSpam)[1], response = "numType")
names(trainSpam)
head(trainSpam)
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cv.Error = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
?cv.glm
data(mammals, package="MASS")
mammals.glm <- glm(log(brain) ~ log(body), data = mammals)
?predict
?pairs
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)]
)
?pairs
?plot
options(rpubs.upload.method = "internal")
install.packages("bitops")
load("bitops")
load(bitops)
library(bitops)
install.packages("Rcurl")
install.packages("RCurl")
library(RCurl)
x <- c(-0.5,0,1,1,1.5)
y <- c(0,0,2,0,0)
plot(x,y,lwd=3,frame=FALSE,type="l")
?plot
plot(x,y,frame=FALSE,type="l")
plot(x,y,frame=FALSE)
?pbeta
x <- seq(0, 1, length = 21)
x
pbeta(x, 1, 1)
pbeta(0.75,2,1)
pbeta(0.9,2,1)
pbeta(0.99,2,1)
pbeta(0.75,1,1)
pl.beta(2, 4)
dbeta(x, 1, 1)
pbeta(1,1,1)
pbeta(1,2,1)
pbeta(1,2,1)
pbeta(0.75,2,1)
qbeta(0.75,2,1)
pbeta(75,2,1)
library(UsingR)
?choose
choose(8,7)
choose(8,4)
choose(8,10)
choose
f
?pbinom
pbinom(6,size=8,prob=0.5,lower.tail=FALSE)
pnorm(1160,mean=1020,sd=50,lower.tail=FALSE)
?ppois
?cumsum
cumsum(1:10)
?ppois
ppois(4,2.5)
ppois(3,2.5*4)
pbinom(2,size=500,prob=0.01)
ppois(2,500*0.01)
n <- 1000
rnorm(n)
cumsum(rnorm(n))
cumsum(rnorm(n))/(1:n)
means <- cumsum(rnorm(n))/(1:n)
plot(means)
plot(means,type="l")
plot(means,type="l",abline=0)
?plot
sample(1:6,n,replace=FALSE)
sample(1:6,5,replace=FALSE)
sample(1:6,5,replace=FALSE)
sample(1:6,5,replace=FALSE)
sample(1:6,5,replace=TRUE)
sample(1:6,5,replace=TRUE)
plot(means,type="l")
abline(y=0)
plot(c(-2,3), c(-1,5), type = "n", xlab="x", ylab="y", asp = 1)
abline(h=0, v=0, col = "gray60")
abline(h=0)
plot(means,type="l")
abline(h=0)
install.packages("UsingR")
library(UsingR)
library(UsingR)
head(father.son)
data(father.son)
x <- father.son$height
qnorm(0.975)
(mean(x) + c(1,-1)*qnorm(0.975)*sd(x)/sqrt(length(x)))/12
x <- father.son$height
x <- father.son$sheight
(mean(x) + c(1,-1)*qnorm(0.975)*sd(x)/sqrt(length(x)))/12
?binom.test
binom.test(c(682, 243), p = 3/4)
class(binom.test(c(682, 243), p = 3/4))
b_samp <- binom.test(c(682, 243), p = 3/4)
b_samp
binom.test(56,100)$conf.int
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Practical/Week 1/Lecture Illustrating Outputs')
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Practical/Week 1/Lecture Prediction Function')
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Practical/Week 1/Lecture Prediction Function')
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Practical/Week 1/Lecture Example Plot')
a = 0
b <<- a + 1
b
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Practical/Week 1/Lecture Reactive Functions')
x = 0
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Practical/Week 1/Lecture Reactive Functions')
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Practical/Week 1/Lecture Nonreactive Reactive Functions')
?manipulate
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR)
library(rCharts)
install.packages("rCharts")
library(rCharts)
install.packages("base64enc")
library(base64enc)
install.packages("rCharts")
library(rCharts)
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("Rtools 3.3")
install.packages("Rtools33")
library(base64enc)
library(devtools)
library(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq~Hair,group='Eye',type='multiBarChart',
data=subset(haireye,Sex=='Male'))
n1$html()
library(googleVis)
install.packages("googleVis")
library(googleVis)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
head(Fruits)
print(M, "chart")
library(googleVis)
print(M, "chart")
BU.Option.cdn = options("rcharts.cdn")
BU.Option.viewer = options("viewer")
options(rcharts.cdn=TRUE)
options(viewer=NULL)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
n1
print(M, "chart")
options(rcharts.cdn = BU.Option.cdn,
viewer = BU.Option.viewer)
plot(M)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='jochrisadrian', token='9308B712F9F462C759E5AD19468526FE', secret='b5A2grV6SeksWjCe/BnkxAOcylzujEUF6ciOdNNB')
deployApp()
install_github("ropensci/plotly")
library(plotly)
set_credentials_file("JosephAdrian", "b4oq60uqmf")
py <- plotly()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
airquality
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Practical/Week 1/Lecture Prediction Function')
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Practical/Week 1/Lecture Prediction Function')
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Practical/Week 1/Lecture Prediction Function')
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Practical/Week 1/Lecture Prediction Function')
?ppois
ppois(20,33,lower.tail=TRUE)
ppois(50,33,lower.tail=TRUE)
?pnorm
pnorm(70, 80, 10, lower.tail=TRUE)
qnorm(0.95,1100,75)
qnorm(1100,1100,75)
qnorm(0.95,1100,7.5)
?binom
?pbinom
pbinom(4,5,0.5)
pbinom(5,5,0.5)
pbinom(3,5,0.5)
?ppois
ppois(10,15,lower.tail=TRUE)
pnorm(70, 80, 10, lower.tail=TRUE)
qnorm(0.95,1100,75)
qnorm(0.95,1100,7.5)
pbinom(4,5,0.5)
pbinom(3,5,0.5)
?binom.test
ppois(10,15,lower.tail=TRUE)
mean6<- 15
sd6<- 10
value6a<- (14-mean6)/(sd6/sqrt(100))
p14<-pnorm(value6a)
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Project/Shiny App')
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Project/Shiny App')
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Project/Shiny App')
shiny::runApp('H:/coursera stuff/data science specialization/09 Developing Data Products/Project/Shiny App')
library(slidify)
library(stringr)
library(devtools)
setwd('H:/coursera stuff/data science specialization/09 Developing Data Products/Project/Reproducible Pitch')
author("first_deck")
